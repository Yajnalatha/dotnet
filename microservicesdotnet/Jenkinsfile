def label = "mypod-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"
podTemplate(label: label, serviceAccount: serviceaccount, 
            containers: [
            containerTemplate(name: 'msbuild', image: 'localhost:32121/root/docker_registry/aiindevops.azurecr.io/msbuild:0.1', ttyEnabled: true, command: 'cat'),
			containerTemplate(name: 'git-secrets', image: 'localhost:32121/root/docker_registry/aiindevops.azurecr.io/git-secrets:0.1', ttyEnabled: true, command: 'cat'),
			containerTemplate(name: 'docker-compose', image: 'localhost:32121/root/docker_registry/docker/compose:1.25.0-rc2', ttyEnabled: true, command: 'cat'),
			containerTemplate(name: 'clair-scanner', image: 'localhost:32121/root/docker_registry/aiindevops.azurecr.io/clair-scanner:0.1', ttyEnabled: true, command: 'cat', ports: [portMapping(name: 'clair-scanner', containerPort: '9279')],
					volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]),
            containerTemplate(name: 'kubeaudit', image: 'localhost:32121/root/docker_registry/aiindevops.azurecr.io/kube-audit:0.1', ttyEnabled: true, command: 'cat'),
            containerTemplate(name: 'kubectl', image: 'localhost:32121/root/docker_registry/aiindevops.azurecr.io/docker-kubectl:19.03-alpine', ttyEnabled: true, command: 'cat',
                             volumes: [secretVolume(secretName: 'kube-config', mountPath: '/root/.kube')]),
			containerTemplate(name: 'docker', image: 'localhost:32121/root/docker_registry/docker:18.09', ttyEnabled: true, command: 'cat')],
                             volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')],
			imagePullSecrets: ['gcrcred']
			)
{
node(label) {

    def GIT_URL= 'http://gitlab.ethan.svc.cluster.local:8084/gitlab/root/microservicesdotnet.git'
	def GIT_CREDENTIAL_ID ='gitlab'
	def GIT_BRANCH='master'
  
  /***COMPONENT_KEY value should be same as what is given as ProjectName in in sonar.properies file ***/		
		def COMPONENT_KEY='dotnet';
		def rootDir = pwd()	
		def SONAR_UI='http://sonar.ethan.svc.cluster.local:9001/sonar/api/measures/component?metricKeys='
		
		/**** provide Sonar metrickeys which needs to be published to Jenkins console ***/
		String metricKeys = "coverage,code_smells,bugs,vulnerabilities,sqale_index,tests,ncloc,quality_gate_details,duplicated_lines_density";
		
		/*** Below variables used in the sonar maven configuration ***/
		def SONAR_SCANNER='org.sonarsource.scanner.maven'
		def SONAR_PLUGIN='sonar-maven-plugin:3.2'
		def SONAR_HOST_URL='http://sonar.ethan.svc.cluster.local:9001/sonar'
		
	
	//docker details
	/***def DOCKER_HUB_REPO_URL='aiindevops.azurecr.io'
	def DOCKER_HUB_REPO_NAME='aiindevops.azurecr.io'
	def DOCKER_HUB_ACCOUNT = 'aiindevops.azurecr.io'
	def DOCKER_CREDENTIAL_ID='gitlab'***/
	def DOCKER_IMAGE_NAME = 'eshopwebmvc'
	def IMAGE_TAG = '4.1'
    	def K8S_DEPLOYMENT_NAME = 'eshopwebmvc'
    	def GCR_HUB_ACCOUNT = 'localhost:32121'
        def GCR_HUB_ACCOUNT_NAME = 'root'
        def GCR_HUB_REPO_NAME='docker_registry'
		
	stage('Git Checkout') {
	        //step([$class: 'WsCleanup'])
            git branch: GIT_BRANCH, url: GIT_URL,credentialsId: GIT_CREDENTIAL_ID
            def function = load "${WORKSPACE}/JenkinsFunctions_dotnet.groovy"
			def Nap = load "${WORKSPACE}/git_scan_nonallowed.groovy"
			def Ap = load "${WORKSPACE}/git_scan_allowed.groovy"
	
	stage('Git-Secrets') {
		  container('git-secrets') {
			Nap.nonAllowedPattern()
            Ap.AllowedPattern()	
		    sh 'git secrets --scan'
          }
	}

	stage('Restore Packages'){
	    container('msbuild'){
	        sh 'dotnet restore'
	    }
	}
	
	stage('Build  project') {
        container('msbuild') {
          function.buildMethod()
          }
	}
	
	stage('Test'){
        container('msbuild') {
           function.testMethod()
         }
    }
    
    stage('SonarQube analysis') {
      withCredentials([usernamePassword(credentialsId: 'SONAR', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]){
       withSonarQubeEnv('SonarQube') {
            println('Sonar Method enter');
	    	function.sonarMethod()}
    }
   } 
  stage ('Create Docker image') {
    container('docker'){ 
              sh (" cp ${WORKSPACE}/src/Web/Dockerfile ${WORKSPACE}") 
              sh ("docker build -t eshopwebmvc:3.0 --network=host .")
              sh ("docker tag eshopwebmvc:3.0 ${GCR_HUB_ACCOUNT}/${GCR_HUB_ACCOUNT_NAME}/${GCR_HUB_REPO_NAME}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}")
              }
    }
  
  stage('Create jenkinslave service') {
         container('kubectl') {
            echo 'Deploying....'          
            sh """
            ls -lrt
			echo ${label}
			cat ${WORKSPACE}/clair-scanner.yaml | sed "s/{{parm}}/${label}/g" | kubectl apply -f -
			"""						
		}
   }
	
   stage('Docker image scan') {
		   container('clair-scanner') {		
		      sh ("clair-scanner -w 'mywhitelist.yaml' -c 'http://clair:6060' --ip='${label}' -t 'High' ${GCR_HUB_ACCOUNT}/${GCR_HUB_ACCOUNT_NAME}/${GCR_HUB_REPO_NAME}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}")
		      		
		    }
         }
   
  stage(' Push Docker image') {
          container('docker') {
              withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: 'gitlab',
                usernameVariable: 'DOCKER_HUB_USER',
                passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
                    sh ('docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD} '+GCR_HUB_ACCOUNT)
                    sh ("docker push ${GCR_HUB_ACCOUNT}/${GCR_HUB_ACCOUNT_NAME}/${GCR_HUB_REPO_NAME}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}")
                }
              }
			} 
   stage ('kubectl check')
		   {
			   container('kubectl')
			   {
		   //sh 'kubectl get node  >> nodes.txt'
		    //sh 'kubectl auth can-i list nodes'
		  
		   sh 'kubectl get nodes  >> nodes.txt'
		    sh label: '', script: '''
		    if grep -q master nodes.txt; then
			echo "master found" >> master.txt
			else
			echo not found
		    fi
		   echo cat master.txt
		   '''
			   }
		   
		  if (fileExists('master.txt'))
		  {
		
			
			echo " It is  non managed kubernetes service hence executing kube audit and kube bench stages"
			stage('kube-bench Scan') { 
		    container('kubectl') {		
		    sh '''
		    kubectl run --rm -i kube-bench-master-frontend-${BUILD_ID} --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \\"apiVersion\\": \\"v1\\", \\"spec\\": { \\"hostPID\\": true, \\"nodeSelector\\": { \\"kubernetes.io/role\\": \\"master\\" }, \\"tolerations\\": [ { \\"key\\": \\"node-role.kubernetes.io/master\\", \\"operator\\": \\"Exists\\", \\"effect\\": \\"NoSchedule\\" } ] } }" -- master --version 1.13
		    kubectl run --rm -i kube-bench-node-frontend-${BUILD_ID} --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \\"apiVersion\\": \\"v1\\", \\"spec\\": { \\"hostPID\\": true } }" -- node --version 1.13
		    '''
			}       
			}
		  
            
            stage('kube-audit') {
		          container('kubeaudit') {		
		          sh 'kubeaudit -a allowpe'
		        }
            }
		}
		else
		{
			echo " It is Managed Kubernetes service hence executing kubebench and kube-audit only on nodes "
			stage('kube-bench Scan') { 
		    container('kubectl') {	
			
			sh '''
			kubectl run --rm -i kube-bench-node-frontend-${BUILD_ID} --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \\"apiVersion\\": \\"v1\\", \\"spec\\": { \\"hostPID\\": true } }" -- node --version 1.13
			'''
			}
			}
			  stage('kube-audit') {
		          container('kubeaudit') {		
		          sh 'kubeaudit -a allowpe'
		        }
		   }
		   }
		   }
		
		
	stage('Deploy build to Kubernetes') {
              container('kubectl') {
             try{
              sh("kubectl get deployment/${K8S_DEPLOYMENT_NAME} -n ethan")
              if(true){
                sh ("kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${GCR_HUB_ACCOUNT}/${GCR_HUB_ACCOUNT_NAME}/${GCR_HUB_REPO_NAME}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG} -n ethan") 
              }
              } 
              catch(e){
              sh ("kubectl apply -f eshopwebmvc-deployment.yaml -n ethan")
			  sh ("kubectl apply -f eshopwebmvc-service.yaml -n ethan")
              echo "deploying"
              }
              sh ("kubectl get pods -n ethan")
              sh ("kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} -n ethan")
              //sh ("kubectl rollout restart deployment ${K8S_DEPLOYMENT_NAME} -n ethan")
			  sh ("kubectl get svc eshopwebmvc -n ethan")
              LB = sh (returnStdout: true, script: '''kubectl get svc eshopwebmvc -n ethan -o jsonpath="{.status.loadBalancer.ingress[*]['ip', 'hostname']}" ''')
              echo "LB: ${LB}"
              def loadbalancer = "http://"+LB
              echo "loadbalancer: ${loadbalancer}"
              sleep 40 // seconds         
			}
		} 
	}    
  }
}
